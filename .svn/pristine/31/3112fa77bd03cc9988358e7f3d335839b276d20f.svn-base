package com.jp.tic.business.user.controller;import java.io.UnsupportedEncodingException;import java.net.InetAddress;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import sun.misc.BASE64Encoder;import com.jp.tic.business.config.ConfigManager;import com.jp.tic.business.user.entity.Menu;import com.jp.tic.business.user.entity.User;import com.jp.tic.business.user.service.UserAccountService;import com.jp.tic.business.user.service.UserService;import com.jp.tic.common.entity.Tree;import com.jp.tic.common.util.MapGetUtils;import com.jp.tic.framework.controller.AbstractController;import com.jp.tic.security.entity.UserRole;import com.jp.tic.security.service.UserRoleService;import com.jp.tic.system.core.annotation.Log;import com.jp.tic.system.entity.UserLog;import com.jp.tic.system.service.DictionaryService;import com.jp.tic.system.service.OrganizationService;import com.jp.tic.system.service.SystemConfigService;import com.jp.tic.system.service.impl.OrganizationServiceImpl;import com.jp.tic.utils.ResponseUtils;import com.jp.tic.utils.lang.StringUtil;import com.jp.tic.utils.view.RequestUtil;/** *  * <b>function:</b> 用户登录控制器 *  * @author hoojo *  * @createDate 2014-5-27 下午04:24:19 *  * @file UserLoginController.java *  * @package com.jp.tic.business.controller *  * @project iVMS_Business *  * @blog http://blog.csdn.net/IBM_hoojo *  * @email hoojo_@126.com *  * @version 1.0 */@SuppressWarnings("unchecked")@Controller@RequestMapping("/user")public class UserAccountController extends AbstractController {	@Autowired	private UserAccountService<User> userService;	@Autowired	private UserService userMgrService;	@Autowired	private UserRoleService<UserRole> roleService;	@Autowired	private OrganizationServiceImpl orgService;	@Autowired	private SystemConfigService systemConfigService;		@Autowired	private OrganizationService organizationService;		@Autowired	private DictionaryService dictionaryService;		private String localUserName;		@RequestMapping("/updatePasswordPage")	public String toUpdatePasswordPage() throws Exception {		return "/system/update-user-password";	}		@RequestMapping("/toRegister")	public String toRegisterPage() throws Exception {		return "/system/user-register";	}		@RequestMapping("/toMainInfo")	public String toMainInfoPage(Model model, HttpServletRequest request) throws Exception {		Map<String, String> searchParam = RequestUtil.getMapByRequest(request);  		String urlStr = searchParam.get("urlStr");		if (urlStr == null) {			//return "forward:/WEB-INF/childrenTemp.jsp";			//return "forward:/WEB-INF/mainInfo.jsp";			return "forward:/WEB-INF/home/showPage.jsp";		}		//String title = searchParam.get("title");		String title = new String(searchParam.get("title").getBytes("ISO-8859-1"),"utf-8");		String historyFlag = searchParam.get("historyFlag");		Map<String, List<Menu>> menu= (Map<String, List<Menu>>) request.getSession().getAttribute("menu");		String firstName = menu.get("0").get(0).getName();		model.addAttribute("firstName", firstName);		Map<Object, Object> config = ConfigManager.getInstance().getAllConfig();		String homePageFlag = MapGetUtils.getString(config, "home.page.icon.flag");		model.addAttribute("homePageFlag", homePageFlag);		model.addAttribute("urlStr", urlStr);		model.addAttribute("title", title);		model.addAttribute("historyFlag", historyFlag);		model.addAttribute("datas", searchParam.get("datas"));		//return "forward:/WEB-INF/childrenTemp.jsp";		//return "forward:/WEB-INF/mainInfo.jsp";		return "forward:/WEB-INF/home/showPage.jsp";	}		@RequestMapping("/to/main")	public String main(Model model, HttpServletRequest request)			throws Exception {		Map<String, String> searchParam = RequestUtil.getMapByRequest(request);  		//单点登入问题		String id = (searchParam.get("id") == null) ? "" : searchParam.get("id");		String timestamp = (searchParam.get("timestamp") == null) ? "" : searchParam.get("timestamp");		String md = (searchParam.get("md") == null) ? "" : searchParam.get("md");		model.addAttribute("id", id);		model.addAttribute("timestamp", timestamp);		model.addAttribute("md", md);		Map<Object, Object> config = ConfigManager.getInstance().getAllConfig();		String keyword = MapGetUtils.getString(config, "keyword");		model.addAttribute("keyword", keyword);				Map<String, Object> user = (Map<String, Object>) request.getSession()				.getAttribute(AbstractController.SESSION_USER);		if (user == null) {			return "forward:/WEB-INF/view/login.jsp";		}		// List<Map<String, String>> results =		// systemConfigService.findConfigByCode("tabPanelFlag");		List<Map<String, String>> results = systemConfigService				.findConfigByCode("historyFlag");		if (results != null && results.size() > 0) {			model.addAttribute("historyFlag", results.get(0).get("VALUE"));		}		String panelFlag = StringUtil.toString(user.get("CONFIG_FLAG"));		model.addAttribute("panelFlag", panelFlag);		Tree tree = new Tree();		tree.setId("0");		if (StringUtil.checkObj(user.get("USER_CODE"))				&& StringUtil.checkObj(user.get("USER_NAME"))) {			List<Map<String, String>> userRecord = null;			String roleId = StringUtil.toString(user.get("ROLE_ID"));			if (!StringUtil.checkStr(roleId)) {				try {					userRecord = userMgrService.findUserInfo(StringUtil							.toString(user.get("USER_CODE")));					if (userRecord == null || userRecord.size() == 0) {						String userCode = "spjs";// 默认采用视频技术spjs账号对应的管理权限						userRecord = userMgrService.findUserInfo(userCode);					}					if (userRecord != null && userRecord.size() > 0) {						user.put("ROLE_ID", userRecord.get(0).get("ROLE_ID"));					} else {						user.put("ROLE_ID", "");					}				} catch (Exception e) {					user.put("ROLE_ID", "");					e.printStackTrace();				}				String orgCode = StringUtil.toString(user.get("ORG_CODE"));				if (StringUtil.checkStr(orgCode)) {					List<Map<String, String>> orgInfos = userMgrService.findOrgByOrgCodeInfo(orgCode);					if (orgInfos != null && orgInfos.size() > 0) {						((Map<String, Object>) request.getSession()						.getAttribute(AbstractController.SESSION_USER)).put("DWMC", orgInfos.get(0).get("UINT_NAME"));					}				}			}			//配置用户权限菜单			List<Map<String, String>> actions_ = userMgrService.findMenusInfo((String) user.get("USER_CODE"));			if(null!=actions_&&actions_.size()>0){				Map<String, List<Menu>> map=new HashMap<String, List<Menu>>();				for(int i=0;i<actions_.size();i++){					Map<String, String> map_=actions_.get(i);					if(map_.get("TYPE")==null&&map_.get("ACTIONTYPE").equals("exit")){						continue;					}					Menu menu=new Menu();					menu.setParentId(map_.get("PARENTID"));					menu.setName(map_.get("NAME"));					menu.setIconName(map_.get("ICONNAME"));					menu.setType(map_.get("TYPE"));					if(map.containsKey(map_.get("PARENTID"))){						map.get(map_.get("PARENTID")).add(menu);					}else{						List<Menu> list=new ArrayList<Menu>();						list.add(menu);						map.put(map_.get("PARENTID"), list);					}				}				request.getSession().setAttribute("menu", map);			}		}		/*String serRoleId = user.get("ROLE_ID") == "" ? "130731" : user.get(				"ROLE_ID").toString();*/		//知识城,统一角色ID		String defaultRoleId = MapGetUtils.getString(config, "default_role_id");		String serRoleId = user.get("ROLE_ID") == "" ? defaultRoleId : user.get(		"ROLE_ID").toString();		// roleService.loadTreeData(MapUtils.getString(user, "ROLE_ID", "-1"),		// tree);		// roleService.loadTreeData("3", tree);		// 获取当前登录用户的权限树、		roleService.loadTreeData(serRoleId, tree);//		model.addAttribute("tree", tree);		//登入页面及首页图标配置		String homePageFlag = MapGetUtils.getString(config, "home.page.icon.flag");		model.addAttribute("homePageFlag", homePageFlag);		//针对二期临时版本设计的一个主界面功能所用的代码		List<Tree> actions = this.findAllActinsInfo();		model.addAttribute("allActions", actions);		model.addAttribute("loginFlag", user.get("loginFlag"));		//return "forward:/WEB-INF/mainTemp.jsp";				return "forward:/WEB-INF/home/homePage.jsp";		//return "forward:/WEB-INF/firstPage.jsp";	}		@RequestMapping("/to/login")	public String toLogin(Model model, HttpServletRequest request)			throws Exception {		Map<String, String> searchParam = RequestUtil.getMapByRequest(request);		String userName = searchParam.get("userName");		String message = StringUtil.toString(request.getAttribute("message"));		Map<Object, Object> config = ConfigManager.getInstance().getAllConfig();		String homePageFlag = MapGetUtils.getString(config, "home.page.icon.flag");		model.addAttribute("homePageFlag", homePageFlag);		if (StringUtil.checkStr(message)) {			return "/login";		}		if (!StringUtil.checkStr(message) && StringUtil.checkStr(userName)) {			return "forward:/user/login.mvc";		} else {			return "/login";		}	}		/**	 * 加载所有的菜单	 * @return	 */	public List<Tree> findAllActinsInfo() {		List<Map<String, String>> actions = userMgrService.findActionsInfo();		List<Tree> results = new ArrayList<Tree>();		Tree tree = null;		for (Map<String, String> map : actions) {			tree = new Tree();			tree.setText(map.get("NAME"));			tree.setParentId(map.get("PARENTID"));			tree.setUrl(map.get("URL"));			tree.setType(map.get("TYPE"));			tree.setOpenType(map.get("OPEN_TYPE"));			results.add(tree);		}		return results;	}		/**	 * 获取所有的菜单数据	 * @return 查询结果	 */	@RequestMapping("/findActions")	@ResponseBody	public Object findActionsInfo(Model model, HttpServletRequest request) {		List<Map<String, String>> actions = userMgrService.findActionsInfo();		this.jsonResult.setData(actions);	    this.jsonResult.setNeedAlert(false);	    return jsonResult; 	}		/**	 * 获取所有的菜单数据	 * @return 查询结果	 */	@RequestMapping("/findMenus")	@ResponseBody	public Object findMenusInfo(Model model, HttpServletRequest request) throws Exception {		Map<String, Object> user = (Map<String, Object>) request.getSession()		.getAttribute(AbstractController.SESSION_USER);		if(StringUtil.checkObj(user.get("USER_CODE"))){			List<Map<String, String>> actions = userMgrService.findMenusInfo((String)user.get("USER_CODE"));			this.jsonResult.setData(actions);		    this.jsonResult.setNeedAlert(false);		    return jsonResult; 		}		return null;			}		@RequestMapping("/userPage")	public String toUserPage() throws Exception {		return "/system/user-manager";	}		@RequestMapping("/to/updatePassword")	public String toUpdatePassword() throws Exception {		// return "/update-password";		return "/system/update-password";	}		@RequestMapping("/to/register")	public String toRegister() throws Exception {		return "/register";	}		@RequestMapping("/login")	public String login(String userName, String password, String idCard,			HttpServletRequest request) throws Exception {		HttpSession session = request.getSession(); // 创建		Map<String, Object> param = new HashMap<String, Object>();		param.put("userName", StringUtils.defaultIfEmpty(userName, ""));		param.put("password", StringUtils.defaultIfEmpty(password, ""));		param.put("idCard", StringUtils.defaultIfEmpty(idCard, userName));		int count = 0;		Map<String, Object> userRecord = userService.findUser(param);		if (userRecord != null && !userRecord.isEmpty()) {			if (StringUtil.equals(StringUtil.toString(userRecord.get("USER_TYPE")), "KPI")) {				request.setAttribute("message", "当前账号为KPI账号，请使用KPI登录！");				return "forward:/user/to/login.mvc";			} 			if (StringUtil.checkObj(userRecord.get("STARTTIME"))					&& StringUtil.checkObj(userRecord.get("ENDTIME"))) {				int startHour = StringUtil.toInt(userRecord.get("STARTTIME"));				int endHour = StringUtil.toInt(userRecord.get("ENDTIME"));				int hour = new Date().getHours();				if (hour >= startHour && hour < endHour) {					String IP1 = (String) userRecord.get("IP1");					String IP2 = (String) userRecord.get("IP2");					if (!StringUtil.checkStr(IP1) || !StringUtil.checkStr(IP2)) {						session.setAttribute("user", userName);						session.setAttribute("count", count);						request.getSession().setAttribute(								AbstractController.SESSION_USER, userRecord);						request.getSession().setMaxInactiveInterval(								60 * 60 * 24);						this.initLoginLogInfo(userRecord, request, "用户登录系统");					} else {						String IP = getClientIpAddress(request);						String ipStr = IP1 + "-" + IP2;						boolean flag = ipIsValid(ipStr, IP);						if (flag) {							session.setAttribute("user", userName);							session.setAttribute("count", count);							request.getSession()									.setAttribute(											AbstractController.SESSION_USER,											userRecord);							request.getSession().setMaxInactiveInterval(									60 * 60 * 24);							this.initLoginLogInfo(userRecord, request,											"用户登录系统");						} else {							request.setAttribute("message",									"本机IP与用户指定的网段IP不一致，登录失败");							return "forward:/user/to/login.mvc";						}					}				} else {					request.setAttribute("message",							"当前登录时间与用户指定的有效登录时间不一致，登录失败");					return "forward:/user/to/login.mvc";				}			} else {				session.setAttribute("user", userName);				session.setAttribute("count", count);				request.getSession().setAttribute(						AbstractController.SESSION_USER, userRecord);				request.getSession().setMaxInactiveInterval(60 * 60 * 24);				this.initLoginLogInfo(userRecord, request, "用户登录系统");			}		} else {			request.setAttribute("message", "用户名或密码错误！");			return "forward:/user/to/login.mvc";		}		//表示通过用户界面登入的方式		session.setAttribute("loginFlag", "login");		localUserName = StringUtil.toString(userRecord.get("USER_CODE"));		return "redirect:/user/to/main.mvc";	}		// IP网段判断	public boolean ipIsValid(String ipSection, String ip) {		if (ipSection == null)			throw new NullPointerException("IP段不能为空！");		if (ip == null)			throw new NullPointerException("IP不能为空！");		ipSection = ipSection.trim();		ip = ip.trim();		final String REGX_IP = "((25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|\\d)\\.){3}(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|\\d)";		final String REGX_IPB = REGX_IP + "\\-" + REGX_IP;		if (!ipSection.matches(REGX_IPB) || !ip.matches(REGX_IP))			return false;		int idx = ipSection.indexOf('-');		String[] sips = ipSection.substring(0, idx).split("\\.");		String[] sipe = ipSection.substring(idx + 1).split("\\.");		String[] sipt = ip.split("\\.");		long ips = 0L, ipe = 0L, ipt = 0L;		for (int i = 0; i < 4; ++i) {			ips = ips << 8 | Integer.parseInt(sips[i]);			ipe = ipe << 8 | Integer.parseInt(sipe[i]);			ipt = ipt << 8 | Integer.parseInt(sipt[i]);		}		if (ips > ipe) {			long t = ips;			ips = ipe;			ipe = t;		}		return ips <= ipt && ipt <= ipe;	}		/**	 * 	 * 记录用户登陆日志	 * 	 * @param userRecord	 *            用户数据	 */	public void initLoginLogInfo(Map<String, Object> userRecord,			HttpServletRequest request, String info) {		UserLog userLog = new UserLog();		userLog.setUserName(StringUtil.toString(userRecord.get("USER_NAME")));		userLog.setContent(info);		userLog.setLogDate(new Date());		InetAddress addr;		String userIp = "";		try {			userIp = getClientIpAddress(request);			System.out.println("用户IP:" + userIp);		} catch (Exception e) {			e.printStackTrace();		}		userLog.setUserIp(userIp);		userLog.setLogType("LOGIN");		userLog.setRemark("用户"				+ StringUtil.toString(userRecord.get("USER_CODE")) + "登录系统成功。");		userMgrService.saveUserInfo(userLog);	}		/**	 * 	 * 获取客户端中的这是IP地址	 * 	 * 通过多级代理处理来获取客户端真实的IP	 * 	 * @param request	 * 	 * @return	 */	public String getClientIpAddress(HttpServletRequest request) {		String ip = request.getHeader("x-forwarded-for");		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("WL-Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getRemoteAddr();		}		return ip;	}		@RequestMapping("/to/authlogin")	public String authlogin(HttpServletRequest request) throws Exception {		Map<String, Object> param = new HashMap<String, Object>();		String idCard = request.getSession().getAttribute("idCard").toString();		String userName = request.getSession().getAttribute("userName")				.toString();		String orgCode = (request.getSession().getAttribute("orgCode") == null) ? ""				: request.getSession().getAttribute("orgCode").toString();		String role = request.getSession().getAttribute("role") == null ? ""				: request.getSession().getAttribute("role").toString();		String privilege = request.getSession().getAttribute("privilege") == null ? ""				: request.getSession().getAttribute("privilege").toString();		param.put("userName", "");		param.put("password", "");		param.put("idCard", idCard);		Map<String, Object> userRecord = userService.findUser(param);		if (role != null && !role.equals("")) {			userRecord.put("ROLE_ID", role);		}		if (userRecord == null || userRecord.isEmpty()) {			param.put("userName", "youke");			param.put("password", "2");			param.put("idCard", "");			userRecord = userService.findUser(param);			if (userRecord != null) {				userRecord.put("USER_NAME", userName);				userRecord.put("DWMC", "广州市");				userRecord.put("USER_CODE", idCard);			}			List<Map<String, String>> userDatas = userMgrService					.findUserInfo(idCard);			if (userDatas == null || userDatas.size() == 0) {				// 保存KPI登录用户信息				Map<String, String> userParam = new HashMap<String, String>();				userParam.put("userCode", idCard);				userParam.put("userName", userName);				String password = (int) ((Math.random() * 10000)) + "";				userParam.put("password", password);				String orgIdStr = this.dealOrgCode(orgCode);				userParam.put("orgId", orgIdStr);				userParam.put("orgCode", orgCode);				userParam.put("roleId", "103811"); // 默认游客权限				userMgrService.addKPIUserInfo(userParam);			}		} else {			//检查用户信息，是否更新部门			String oldOrgCode = StringUtil.toString(userRecord.get("ORG_CODE"));			//如果用户信息中的详细部门ID与登录的所在部门ID不相同，说明，用户部门发生了变化			if (oldOrgCode == null || !StringUtil.equals(orgCode, oldOrgCode)) {				Map<String, String> updateParam = new HashMap<String, String>();				String orgIdStr = this.dealOrgCode(orgCode);				updateParam.put("orgId", orgIdStr);				updateParam.put("orgCode", orgCode);				updateParam.put("userId", StringUtil.toString(userRecord.get("USER_ID")));				userMgrService.updateKPIUserInfo(updateParam);			}		}		if (StringUtil.checkObj(userRecord.get("DWMC"))) {			List<Map<String, String>> orgInfos = userMgrService					.findOrgByOrgCodeInfo(orgCode);			if (orgInfos != null && orgInfos.size() > 0) {				userRecord.put("DWMC", orgInfos.get(0).get("UINT_NAME"));			}		}		if (userRecord != null && !userRecord.isEmpty()) {			request.getSession().setAttribute(AbstractController.SESSION_USER,					userRecord);			request.getSession().setMaxInactiveInterval(60 * 60 * 24);		} else {			request.setAttribute("message", "用户名或密码错误！");			return "forward:/user/to/login.mvc";		}		localUserName = StringUtil.toString(userRecord.get("USER_CODE"));		// this.initLoginLogInfo();		// return "redirect:/car/query.mvc";		return "redirect:/user/to/main.mvc";	}		/**	 * 根据用户部门编号判断所属分局	 * @param orgCode	 * @return	 */	public String dealOrgCode(String orgCode) {		String orgId = orgCode.substring(0, 4);		String orgIdStr = "";		if (StringUtil.equals(orgId, "4401")) {			List<Map<String, String>> orgInfos = organizationService.loadAllOrgInfo();			String orgStr = "";			boolean havingFlag = false;			boolean orgFlag = false;			boolean reFlag = false;			orgId = orgCode.substring(0, 6);			for (int i = 0; i < orgInfos.size(); i++) {				orgStr = orgInfos.get(i).get("DWBH").substring(0, 6);				if (StringUtil.equals(orgStr, orgId)) {					if (StringUtil.equals(orgId, "440100")) {						orgId = orgCode.substring(0, 8);						if (StringUtil.equals(orgId, "44010023") || StringUtil.equals(orgId, "44010000")) {							orgIdStr = orgId + "0000";							reFlag = true;						}						orgFlag = true;					}					havingFlag = true;					break;				}			}			if (havingFlag && !orgFlag) {				orgIdStr = orgId + "000000";			} else if (havingFlag && orgFlag && !reFlag) {				orgIdStr = "440100";			} else if (!havingFlag) {				orgIdStr = "440100";			}		}		return orgIdStr;	}		/**	 * 	 * MD5加密	 * 	 * @param str	 * 	 * @return	 * 	 * @throws NoSuchAlgorithmException	 * 	 * @throws UnsupportedEncodingException	 */	public String EncoderByMd4(String str) throws NoSuchAlgorithmException,			UnsupportedEncodingException {		MessageDigest md5 = MessageDigest.getInstance("MD5");		BASE64Encoder base64en = new BASE64Encoder();		String newStr = base64en.encode(md5.digest(str.getBytes("UTF-8")));		return newStr;	}		@RequestMapping("/register")	public String register(User user, Model model) throws Exception {		if (userService.add(user)) {			return "redirect:/user/to/login.mvc";		} else {			model.addAttribute("message", "注册失败，请重新注册！");			model.addAttribute("user", user);			return "/register";		}	}		@RequestMapping("/updatePassword")	public String updatePassword(User user, String newpassword, Model model)			throws Exception {		User entity = new User();		entity = userService.get(user.getUserId());		entity.setPassword(newpassword);		if (userService.edit(entity)) {			return "redirect:/car/query.mvc";		} else {			model.addAttribute("message", "修改密码失败，请重试！");			model.addAttribute("user", user);			// return "/update-password";			return "/system/update-password";		}	}		@RequestMapping("/to/user")	public String toUserMain(String keyword, User user, Model model)			throws Exception {		user.setUserCode(keyword);		List<User> users = userService.getList(user);		model.addAttribute("users", users);		// return "/main-user";		return "/system/main-user";	}		@RequestMapping("/remove")	public String remove(User user, Model model) throws Exception {		userService.remove(user);		return "redirect:/user/to/user.mvc";	}		@RequestMapping("/edit")	public String saveOrUpdate(User user, Model model) throws Exception {		if (userService.saveOrUpdate(user)) {			return "redirect:/user/to/user.mvc";		} else {			model.addAttribute("message", "操作失败，请重新再试！");			model.addAttribute("user", user);			return "forward:/user/to/user.mvc";		}	}		/**	 * 	 * 分页查询用户信息数据	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	@RequestMapping("/queryUser")	@ResponseBody	@Log(value = "'用户'+getCurrentUser().get('USER_CODE')+'查询用户信息'", content = "'用户名称:' + getWebParamInfo().get('userMgrName') + ',组织编号:' + getWebParamInfo().get('code')", needPersist = true, operation = "SEARCH")	public Object queryUserInfo(Model model, HttpServletRequest request) {		Map<String, String> searchParam = RequestUtil.getMapByRequest(request);		searchParam.put("start", searchParam.get("page.start"));		searchParam.put("limit", searchParam.get("page.limit"));		String orgType = searchParam.get("orgType");		String orgCode = "440";		String code = searchParam.get("code");		if (StringUtil.equals(orgType, "0")) {			orgCode = code.substring(0, 4);		} else if (StringUtil.equals(orgType, "1")) {			orgCode = code.substring(0, 6);		} else if (StringUtil.equals(orgType, "2")) {			orgCode = code.substring(0, 8);		}		if (StringUtil.equals(orgType, "0")) {			searchParam.put("code", "like '" + orgCode + "%'");		} else if (StringUtil.equals(orgType, "1")) {			if (StringUtil.equals(orgCode, "440100")) {				orgCode = code.substring(0, 8);			}			searchParam.put("code", "like '" + orgCode + "%'");			searchParam.put("code_end", orgCode);			/*if (StringUtil.equals(code, "440100000000")) {				searchParam.put("code", "like '" + orgCode + "%' and ORGAN_ID != '" + orgCode + "' and ORGAN_ID != '440100230000'");			} else if (StringUtil.equals(code, "440100230000")) {				searchParam.put("code", "like '" + orgCode + "%' and ORGAN_ID != '" + orgCode + "' and ORGAN_ID != '440100000000'");			} else {				searchParam.put("code", "like '" + orgCode + "%'");			}*/		} else if (StringUtil.equals(orgType, "2")) {			searchParam.put("code", "= '" + code + "'");			orgCode = code.substring(0, 8);			if (StringUtil.equals(orgCode, "44010023")) {				searchParam.put("code_end", code.substring(0, 10));			} else {				searchParam.put("code_end", code.substring(0, 8));			}		}		List<Map<String, String>> results = userMgrService				.queryUserInfo(searchParam);		List<Map<String, String>> counts = userMgrService				.countUserDatas(searchParam);		int amounts = StringUtil.toInt(StringUtil.toString(counts.get(0).get(				"COUNTS")));		return ResponseUtils.sendList(results, amounts);	}		/**	 * 	 * 添加用户信息	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	@RequestMapping("/addUser")	@ResponseBody	// @Log(value =	// "'用户'+getCurrentUser().get('USER_CODE')+'新增用户信息'",content="'用户账号:' + getWebParamInfo().get('USER_CODE')",needPersist=	// true,operation="ADD")	public Object addUserInfo(Model model, HttpServletRequest request) {		Map<String, String> searchParam = RequestUtil.getMapByRequest(request);		int saveFlag = 0;		if (!StringUtil.checkStr("ORGAN_ID")) {			List<Map<String, String>> results = orgService.loadOrgData();			searchParam.put("ORGAN_ID", results.get(0).get("ID"));		}		saveFlag = this.userMgrService.addUserInfo(searchParam);		this.jsonResult.setData(saveFlag);		this.jsonResult.setNeedAlert(false);		return jsonResult;	}		/**	 * 	 * 初始化修改数据的详细信息	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	@RequestMapping("/initUserDetail")	@ResponseBody	public Object initUserDetailInfo(Model model, HttpServletRequest request) {		Map<String, String> searchParam = RequestUtil.getMapByRequest(request);		List<Map<String, String>> results = userMgrService				.initUserDetailInfo(searchParam);		this.jsonResult.setData(results);		this.jsonResult.setNeedAlert(false);		return jsonResult;	}		/**	 * 	 * 密码修改，检查输入的原始密码是否与数据库中的密码一致	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	@RequestMapping("/checkPassword")	@ResponseBody	public Object checkPasswordInfo(Model model, HttpServletRequest request) {		Map<String, String> searchParam = RequestUtil.getMapByRequest(request);		Map<String, Object> userMap = (Map<String, Object>) (request				.getSession().getAttribute(AbstractController.SESSION_USER));		int saveFlag = 0; // 默认不存在		String userCode = userMap.get("USER_CODE").toString();		if (!StringUtil.equals(userCode, searchParam.get("USER_CODE"))) {			saveFlag = 0; // 只能修改自己账号的密码		} else {			List<Map<String, String>> results = userMgrService					.checkPasswordInfo(searchParam);			if (results != null && results.size() > 0) {				if (StringUtil.equals(results.get(0).get("PASSWORD"),						searchParam.get("OLD_PASSWORD"))) {					saveFlag = 1; // 查询存在				}			}		}		this.jsonResult.setData(saveFlag);		this.jsonResult.setNeedAlert(false);		return jsonResult;	}		/**	 * 	 * 修改用户信息	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	@RequestMapping("/updateUser")	@ResponseBody	@Log(value = "'用户'+getCurrentUser().get('USER_CODE')+'修改用户信息'", content = "'用户账号:' + getWebParamInfo().get('USER_CODE')", needPersist = true, operation = "UPDATE")	public Object updateUserInfo(Model model, HttpServletRequest request) {		Map<String, String> user = (Map<String, String>) request.getSession().getAttribute(AbstractController.SESSION_USER);		Map<String, String> searchParam = RequestUtil.getMapByRequest(request);		String roleId = StringUtil.toString(user.get("ROLE_ID"));		List<Map<String, String>> roles = dictionaryService.findRoleInfo(roleId);		String roleName = "";		String updateRoleId = searchParam.get("ROLE_HIDDEN_ID");		List<Map<String, String>> topRoles = dictionaryService.findRoleInfo(updateRoleId);		int updateFlag = 0;		if (roles != null && roles.size() > 0) {			roleName = roles.get(0).get("ROLE_NAME");			if (StringUtil.equals(roleName, "超级管理员权限")) {				updateFlag = this.userMgrService.updateUserInfo(searchParam);			}			if (roleName.contains("管理员") && !StringUtil.equals(roleName, "超级管理员权限")) {				String selectRoleName = topRoles.get(0).get("ROLE_NAME");				if (selectRoleName.contains("管理员")) {					updateFlag = 0;				} else {					updateFlag = this.userMgrService.updateUserInfo(searchParam);				}			}		}		this.jsonResult.setData(updateFlag);		this.jsonResult.setNeedAlert(false);		return jsonResult;	}		/**	 * 	 * 修改用户密码	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	@RequestMapping("/reUpdatePassword")	@ResponseBody	@Log(value = "'用户'+getCurrentUser().get('USER_CODE')+'修改用户密码'", content = "'用户账号:' + getWebParamInfo().get('USER_CODE')", needPersist = true, operation = "UPDATE")	public Object updatePasswordInfo(Model model, HttpServletRequest request) {		Map<String, String> searchParam = RequestUtil.getMapByRequest(request);		int updateFlag = 0;		updateFlag = this.userMgrService.updatePasswordInfo(searchParam);		this.jsonResult.setData(updateFlag);		this.jsonResult.setNeedAlert(false);		return jsonResult;	}		/**	 * 	 * 删除用户信息	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	@RequestMapping("/deleteUser")	@ResponseBody	@Log(value = "'用户'+getCurrentUser().get('USER_CODE')+'删除用户信息'", content = "'用户ID:' + getWebParamInfo().get('USER_IDS')", needPersist = true, operation = "DELETE")	public Object deleteUserInfo(Model model, HttpServletRequest request) {		Map<String, String> searchParam = RequestUtil.getMapByRequest(request);		int deleteFlag = 0;		String idStr = "";		String[] ids = searchParam.get("USER_IDS").split(",");		for (int i = 0; i < ids.length; i++) {			if (StringUtil.checkStr(idStr)) {				idStr += ",";			}			idStr += "'" + ids[i] + "'";		}		searchParam.put("USER_IDS", idStr);		deleteFlag = this.userMgrService.deleteUserInfo(searchParam);		this.jsonResult.setData(deleteFlag);		this.jsonResult.setNeedAlert(false);		return jsonResult;	}		/**	 * 	 * 检查是否存已存在用户信息	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	@RequestMapping("/checkUser")	@ResponseBody	public Object checkUserInfo(Model model, HttpServletRequest request) {		Map<String, String> searchParam = RequestUtil.getMapByRequest(request);		List<Map<String, String>> oldResults = userMgrService				.checkUserInfo(searchParam);		int saveFlag = 0;		if (oldResults != null && oldResults.size() > 0) {			saveFlag = -1;		}		this.jsonResult.setData(saveFlag);		this.jsonResult.setNeedAlert(false);		return jsonResult;	}		/**	 * 	 * @return the localUserName	 */	public String getLocalUserName() {		return localUserName;	}		/**	 * 	 * @param localUserName	 *            the localUserName to set	 */	public void setLocalUserName(String localUserName) {		this.localUserName = localUserName;	}}