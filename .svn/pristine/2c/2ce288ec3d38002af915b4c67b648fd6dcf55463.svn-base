package com.jp.tic.business.user.dao.impl;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import com.jp.tic.business.config.ConfigManager;import com.jp.tic.business.user.dao.UserDao;import com.jp.tic.common.util.MapGetUtils;import com.jp.tic.framework.controller.AbstractController;import com.jp.tic.system.dao.BaseDao;import com.jp.tic.system.entity.UserLog;import com.jp.tic.utils.lang.DateUtil;import com.jp.tic.utils.lang.StringUtil;@SuppressWarnings("unchecked")public class UserDaoImpl extends BaseDao implements UserDao {	/**	 * 	 * 获取当前用户信息	 * 	 * @param param查询参数	 * 	 * @return 查询结果。	 */	public Map<String, Object> getCurrentUser(HttpServletRequest request) {		Map<String, Object> userMap = (Map<String, Object>) (request				.getSession().getAttribute(AbstractController.SESSION_USER));		return userMap;	}		/**	 * 	 * 保存用户日志操作信息	 * 	 * @param userLog	 *            userLog对象	 * 	 * @return 操作结果	 */	public int saveUserInfo(UserLog userLog) {		int saveFlag = 0;		StringBuffer buffer = new StringBuffer();		buffer				.append("insert into SYS_T_LOG(ID,USERCODE,CONTENT,GENERATETIME,REMARK,USER_IP,LOG_TYPE) values (SEQ_J_SYS_LOG.NEXTVAL");		if (StringUtil.checkObj(userLog.getUserName())) {			buffer.append(",'" + userLog.getUserName() + "'");		} else {			buffer.append(",''");		}		if (StringUtil.checkObj(userLog.getContent())) {			buffer.append(",'" + userLog.getContent() + "'");		} else {			buffer.append(",''");		}		buffer.append(",to_date('"				+ DateUtil.parseToString(userLog.getLogDate(),						"yyyy-MM-dd HH-mm-ss") + "','yyyy-MM-dd HH24:mi:ss')");		if (StringUtil.checkObj(userLog.getRemark())) {			buffer.append(",'" + userLog.getRemark() + "'");		} else {			buffer.append(",''");		}		if (StringUtil.checkObj(userLog.getUserIp())) {			buffer.append(",'" + userLog.getUserIp() + "'");		} else {			buffer.append(",''");		}		if (StringUtil.checkObj(userLog.getLogType())) {			buffer.append(",'" + userLog.getLogType() + "'");		} else {			buffer.append(",''");		}		buffer.append(")");		try {			saveFlag = this.updateBySql(buffer.toString());		} catch (Exception e) {			e.printStackTrace();		}		return saveFlag;	}		public void startSay() { // 告知在xml文件中配置为前置通知		System.out.println("Good Morning");	}		public void endSay() { // 告知在xml文件中配置为后置通知		System.out.println("bye bye");	}		public void saveUserTest() {		System.out.println("虚拟插入数据库，看看是否成功====================");	}		/**	 * 	 * 密码修改，检查输入的原始密码是否与数据库中的密码一致	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	public List<Map<String, String>> checkPasswordInfo(Map<String, String> param) {		List<Map<String, String>> datas = null;		StringBuffer sqlBuffer = new StringBuffer();		sqlBuffer.append("select password from SYS_T_USER where user_code = '"				+ param.get("USER_CODE") + "'");		try {			datas = this.queryBySql(sqlBuffer.toString());		} catch (Exception e) {			e.printStackTrace();			return null;		}		return datas;	}		/**	 * 	 * 修改用户密码	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	public int updatePasswordInfo(Map<String, String> param) {		int saveFlag = 0;		StringBuffer buffer = new StringBuffer();		buffer.append("update SYS_T_USER set password = '"				+ param.get("NEW_PASSWORD") + "' where user_code = '"				+ param.get("USER_CODE") + "'");		try {			saveFlag = this.updateBySql(buffer.toString());		} catch (Exception e) {			e.printStackTrace();		}		return saveFlag;	}		/**	 * 	 * 根据用户账户和用户名查询用户信息	 * 	 * @param userCode	 *            用户账号	 * 	 * @return 查询结果	 * 	 * @throws Exception	 *             异常	 */	public List<Map<String, String>> findUserInfo(String userCode)			throws Exception {		List<Map<String, String>> datas = null;		StringBuffer sqlBuffer = new StringBuffer();		sqlBuffer.append("select * from SYS_T_USER where user_code = '"				+ userCode + "'");		try {			datas = this.queryBySql(sqlBuffer.toString());		} catch (Exception e) {			e.printStackTrace();			return null;		}		return datas;	}		/**	 * 	 * 通过用户获取用户组织结构关系表中的数据	 * 	 * @param orgCode	 *            组织ID	 * 	 * @return 查询结果	 * 	 * @throws Exception	 *             异常	 */	public List<Map<String, String>> findOrgByOrgCodeInfo(String orgCode)			throws Exception {		List<Map<String, String>> datas = null;		StringBuffer sqlBuffer = new StringBuffer();		sqlBuffer.append("select * from J_USER_ORG_MAP where UINT_CODE = '"				+ orgCode + "'");		try {			datas = this.queryBySql(sqlBuffer.toString());		} catch (Exception e) {			e.printStackTrace();			return null;		}		return datas;	}		/**	 * 	 * 添加KPI用户信息	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	public int addKPIUserInfo(Map<String, String> param) {		int saveFlag = 0;		StringBuffer buffer = new StringBuffer();		buffer				.append("insert into SYS_T_USER(USER_ID,USER_CODE,USER_NAME,PASSWORD,ORGAN_ID,ROLE_ID,ID_CARD,STARTTIME,ENDTIME,ORG_CODE) values (SEQ_SYS_T_USER.NEXTVAL");		if (StringUtil.checkObj(param.get("userCode"))) {			buffer.append(",'" + param.get("userCode") + "'");		} else {			buffer.append(",''");		}		if (StringUtil.checkObj(param.get("userName"))) {			buffer.append(",'" + param.get("userName") + "'");		} else {			buffer.append(",''");		}		if (StringUtil.checkObj(param.get("password"))) {			buffer.append(",'" + param.get("password") + "'");		} else {			buffer.append(",''");		}		if (StringUtil.checkObj(param.get("orgId"))) {			buffer.append("," + param.get("orgId"));		} else {			buffer.append(",");		}		if (StringUtil.checkObj(param.get("roleId"))) {			buffer.append("," + param.get("roleId"));		} else {			buffer.append(",");		}		if (StringUtil.checkObj(param.get("userCode"))) {			buffer.append(",'" + param.get("userCode") + "'");		} else {			buffer.append(",''");		}		buffer.append(",0");		buffer.append(",24");		if (StringUtil.checkObj(param.get("orgCode"))) {			buffer.append(",'" + param.get("orgCode") + "'");		} else {			buffer.append(",''");		}		buffer.append(")");		try {			saveFlag = this.updateBySql(buffer.toString());		} catch (Exception e) {			e.printStackTrace();		}		return saveFlag;	}		/**	 * kpi用户登录系统，更新用户信息	 * @param param 参数	 * @return 更新结果	 */	public int updateKPIUserInfo(Map<String, String> param) { 		int saveFlag = 0;		StringBuffer buffer = new StringBuffer();		buffer.append("update SYS_T_USER set");		if (StringUtil.checkObj(param.get("orgId"))) {			buffer.append(" ORGAN_ID = " + param.get("orgId"));		}		if (StringUtil.checkObj(param.get("orgCode"))) {			buffer.append(",ORG_CODE = '" + param.get("orgCode") + "'");		} 		buffer.append(" where USER_ID = '" + param.get("userId") + "'");		try {			saveFlag = this.updateBySql(buffer.toString());		} catch (Exception e) {			e.printStackTrace();		}		return saveFlag;	}		/**	 * 获取所有的菜单数据	 * @return	 * @throws Exception	 */	public List<Map<String, String>> findActionsInfo() {		List<Map<String, String>> datas = null;		StringBuffer sqlBuffer = new StringBuffer();		sqlBuffer.append("select id, parentid, code, name, describe, actiontype, isvalid, url, iconname, remark, type, open_type from SYS_ACTION where type is not null");		try {			datas = this.queryBySql(sqlBuffer.toString());		} catch (Exception e) {			e.printStackTrace();			return null;		}		return datas;	}		/**	 * 获取用户所有的菜单数据	 * @return	 * @throws Exception 	 * @throws Exception	 */	public List<Map<String, String>> findMenusInfo(String user_code) throws Exception {		List<Map<String, String>> userInfo = this.findUserInfo(user_code);		String userCode = "";		List<Map<String, String>> datas = null;		StringBuffer sqlBuffer = new StringBuffer();		if (userInfo == null || userInfo.size() == 0) {			//统一角色ID			Map<Object, Object> config = ConfigManager.getInstance().getAllConfig();    		String defaultRoleId = MapGetUtils.getString(config, "default_role_id");			List<Map<String, String>>  users = this.findUserByRoleId(defaultRoleId);			if (users != null && users.size() > 0) {				userCode = users.get(0).get("USER_CODE");			}			sqlBuffer.append("select t.id, t.parentid, t.code, t.name, t.describe, t.actiontype, t.url, t.iconname, t.remark, t.type, t.open_type from J_SYS_MENU t,sys_t_user a,sys_role b" 					+ " where t.isvalid=1 and a.role_id=b.roleid and t.id=b.actionid and a.user_code='"+userCode+"' order by t.ordersign asc");		} else {			sqlBuffer.append("select t.id, t.parentid, t.code, t.name, t.describe, t.actiontype, t.url, t.iconname, t.remark, t.type, t.open_type from J_SYS_MENU t,sys_t_user a,sys_role b" 					+ " where t.isvalid=1 and a.role_id=b.roleid and t.id=b.actionid and a.user_code='"+user_code+"' order by t.ordersign asc");		}		try {			datas = this.queryBySql(sqlBuffer.toString());		} catch (Exception e) {			e.printStackTrace();			return null;		}		return datas;	}		public List<Map<String, String>> findUserByRoleId(String roleId) {		List<Map<String, String>> datas = null;		StringBuffer sqlBuffer = new StringBuffer();		sqlBuffer.append("select * from SYS_T_USER where role_id = '"				+ roleId + "'");		try {			datas = this.queryBySql(sqlBuffer.toString());		} catch (Exception e) {			e.printStackTrace();			return null;		}		return datas;	}}