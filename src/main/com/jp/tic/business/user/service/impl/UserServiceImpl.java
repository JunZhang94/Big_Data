package com.jp.tic.business.user.service.impl;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.springframework.beans.factory.annotation.Autowired;import com.jp.tic.business.user.dao.UserDao;import com.jp.tic.business.user.mapper.UserQueryMapper;import com.jp.tic.business.user.service.UserService;import com.jp.tic.system.entity.UserLog;@SuppressWarnings("unchecked")public class UserServiceImpl implements UserService {	@Autowired	UserDao userDao;	@Autowired	UserQueryMapper mapper;		/**	 * 	 * 获取当前用户信息	 * 	 * @param param查询参数	 * 	 * @return 查询结果。	 */	public Map<String, Object> getCurrentUser(HttpServletRequest request) {		return userDao.getCurrentUser(request);	}		/**	 * 	 * 分页查询用户信息数据	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	public List<Map<String, String>> queryUserInfo(Map<String, String> param) {		return mapper.queryUserInfo(param);	}		/**	 * 	 * 统计用户信息数量	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	public List<Map<String, String>> countUserDatas(Map<String, String> param) {		return mapper.countUserDatas(param);	}		/**	 * 	 * 添加用户信息	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	public int addUserInfo(Map<String, String> param) {		return mapper.addUserInfo(param);	}		/**	 * 	 * 删除用户信息	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	public int deleteUserInfo(Map<String, String> param) {		return mapper.deleteUserInfo(param);	}		/**	 * 	 * 更新用户信息	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	public int updateUserInfo(Map<String, String> param) {		return mapper.updateUserInfo(param);	}		/**	 * 	 * 修改用户信息，加载要修改的数据信息	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	public List<Map<String, String>> initUserDetailInfo(			Map<String, String> param) {		return mapper.initUserDetailInfo(param);	}		/**	 * 	 * 检查是否已经存在此用户信息	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	public List<Map<String, String>> checkUserInfo(Map<String, String> param) {		return mapper.checkUserInfo(param);	}		/**	 * 	 * 保存用户日志操作信息	 * 	 * @param userLog	 *            userLog对象	 * 	 * @return 操作结果	 */	public int saveUserInfo(UserLog userLog) {		return userDao.saveUserInfo(userLog);	}		public void startSay() {		userDao.startSay();	}		public void endSay() {		userDao.endSay();	}		public void saveUserTest() {		userDao.saveUserTest();	}		/**	 * 	 * 密码修改，检查输入的原始密码是否与数据库中的密码一致	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	public List<Map<String, String>> checkPasswordInfo(Map<String, String> param) {		return userDao.checkPasswordInfo(param);	}		/**	 * 	 * 修改用户密码	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	public int updatePasswordInfo(Map<String, String> param) {		return userDao.updatePasswordInfo(param);	}		/**	 * 	 * 根据用户账户和用户名查询用户信息	 * 	 * @param userCode	 *            用户账号	 * 	 * @return 查询结果	 * 	 * @throws Exception	 *             异常	 */	public List<Map<String, String>> findUserInfo(String userCode)			throws Exception {		return userDao.findUserInfo(userCode);	}		/**	 * 	 * 通过用户获取用户组织结构关系表中的数据	 * 	 * @param orgCode	 *            组织ID	 * 	 * @return 查询结果	 * 	 * @throws Exception	 *             异常	 */	public List<Map<String, String>> findOrgByOrgCodeInfo(String orgCode)			throws Exception {		return userDao.findOrgByOrgCodeInfo(orgCode);	}		/**	 * 	 * 添加KPI用户信息	 * 	 * @param param	 *            查询参数	 * 	 * @return 返回结果	 */	public int addKPIUserInfo(Map<String, String> param) {		return userDao.addKPIUserInfo(param);	}		/**	 * kpi用户登录系统，更新用户信息	 * @param param 参数	 * @return 更新结果	 */	public int updateKPIUserInfo(Map<String, String> param) {		return userDao.updateKPIUserInfo(param);	}		/**	 * 获取所有的菜单数据	 * @return	 * @throws Exception	 */	public List<Map<String, String>> findActionsInfo() {		return userDao.findActionsInfo();	}		/**	 * 获取用户所有的菜单数据	 * @return	 * @throws Exception	 */	public List<Map<String, String>> findMenusInfo(String user_code) throws Exception {		return userDao.findMenusInfo(user_code);	}}